---
layout: post
title:  "Blog Post 0"
date:   2020-01-28 20:10:25 -0800
categories: jekyll blog
---
For the first week of class, I focused on setting up the Jekyll static site generator on the Windows 10 operating system since something seems to have corrupted the data associated with it from last semester. 
This provided me with an opportunity to get better acquainted with the technology and to improve my understanding of how it functions. I found a playlist of informative videos by Mike Dane on YouTube that showed me step-by-step instructions on how to setup a simple blog using the software tool and link it to one of my repositories on Github. The first few videos in the playlist covered the installation process and the necessary prerequisites that were needed for the static site genreator to work properly. It required the Ruby DevKit becasue the tool apparently runs off of it, therefore I first had to install this on my machine. I then had to follow the set of on screen instructions that were listed during the installation process by downloading certain components in a specified order. Once this was accomplished, I could finally install Jekyll on my system by entering the "gem install jekyll bundler"command in the Command Prompt. The program instantly became ready to use after it had downloaded and installed the required gems it needed to operate. The next few videos focused on the general structure of the Jekyll file hierarchy and where to find specific elements of it. The tool provides features for not only generating blog posts but also rough drafts, detailed webpages, custom themes, structural layouts, and other aspects of a website. Some of this content was visibly displayed in the sample post initially created by static site generator. With the  "bundle exec jekyll serve" command, I was able to run the sample post in a web browser to see how it would function when online. The composition of the post seemed simple in nature and its content is useful because i can repurpose it as a template for future posts. Another video in the playlist went over the steps involved with the synchronization process between Jekyll and Github. Before I could do anything else, I had to install yet another essential component called Git that would provide me with the necessary functionality to proceed with uploading my blog to Github. I integrated this software into my system and moved on to the next step which included a series of Git-related commands. In the video, several commands were issued to link the two, digital environments together. Merging these two workspaces was achieved through the use of commands such as "git status" to display a list of files that have yet to be added to the online repository on Github and "git add ." to prepare these files by changing the working directory to the staging area through specifying the intent to update a particular file in the next commit. This was further added upon by the use of the "git commit -m 'message'" command to notify the user of the change by giving a brief description as to why the change was committed to the Github repository. From there, I utilized the "git remote add origin https://github.com/MRLawton/CIT481-Weekly-Blog.git" command to synchronize the blog files with the associated repository on Github. The linked workspaces were then ready for the "git push origin gh-pages" command to actually push the files associated with my newly created blog onto the specified Github repository. I initially had some difficulty getting these two areas to sync up properly, but I somehow got the two of them to cooperate. I think the problem I was having was related to a lack of user credentials that were needed for the authentication process. I had to enter my name and email before I could even try to connect to Github with my username and password for my account. By following the aforementioned commands and other instructions provided in the videos, I was able to transfer the default files associated with my blog, which I had named "cit481_blog", to the "gh-pages" branch of my "CIT481-Weekly-Blog" repository on Github. It appears that the "gh-pages" branch will serve as the master branch for this repository. With the synchronization of these two workspaces, I have begun writing my first blog post using the Jekyll static site generator. This experience seems a bit different from last semester because I think I was using the terminal in the Ubuntu version of the Windows Subsystem for Linux (WSL) to interact with Jekyll and Github instead of the Command Prompt. This means I was following a hybridized approach to blogging since it uttilized both the Windows and Ubutnu operating systems. Though bloggin in this manner might be different, it feels similar since the process seems the same at its core. I think the biggest difference is that I am navigating through a different set of folders in the directory hierarchy. To get to those stored in the Ubuntu subsystem, I would have to follow this pathname: C:\Users\calgu\AppData\Local\Packages\CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc\LocalState\rootfs\home\mlawton\Desktop, but with Jekyll setup completely on the Windows environment I just have to go into C:\Users\calgu\ to access the necessary files. I also think that there could be a disparity between the commands used in the Linux terminal and Windows' Command Prompt, but as of now there have been no distinguishable differences that I have noticed. So far, utilizing the Windows environment to write blog posts appears to be working correctly since it seems I can display things locally with Jekyll, but I will see later if I can get this post to transfer over to Github properly without any issues. 

While searching for ideas as to what my group could work on for the next project, I discovered a number of possible candidates that appear to have some potential to them. I had intially placed these ideas in a list to further examine them later on, but as I revisited these ideas, I realized some of them might be better choices than others. Therefore, I went through the list and narrowed it down until there were fewer possibilities to choose from. The ideas that remained included hosting a static website, deploying a Node.js web app, building a serverless web application, deploying a Python web app, and deploying a Kubernetes application. After reviewing these ideas on the "Projects of AWS" webpage, the Node.js web-based application seemed like a harder version of the static website choice since it involves some form of Javascript and utilizes a more dynamic state of operation. It can refine my knowledge of web development and reinforce what I know about how it interacts with various aspects of Amazon Web Services (AWS). Another project that looks promising is the idea of a serverless web application since it covers the fundamentals of AWS and integrates Javascript from the RESTful APIs. These two options seem rather simple compared to some of the other selections and could help me learn more about these resources. I haven't really worked with Javascript before, so it seems like a good opportunity to learn something new. I feel that my understanding of certain areas is still a bit shaky, so it could provide a good learning experience for me to benefit from. Deploying a Python web app also seems like a good idea since it will give me an opportunity to take a look at a useful programming language that appears to be related to web engineering and server operations. This is yet another type of code that I have no experience with, so a chance to experiment with it would improve my understanding of certain concepts and provide me with some experience in areas that I feel could use some more work. The last option that seemed interesting is the deployment of a Kubernetes application. According to the provided description of this project, it incorporates the Elastic Container Service for Kubernetes (EKS) to deploy, manage, and scale applications using Kubernetes on AWS. The service integrates multiple components to enclose a set of applications within AWS infrastructure. This choice reminds me a bit of the final project my team had to work on last semester since it implemented the Elastic Container Service (ECS). If chosen, EKS could help us grasp the details of container services in AWS since it seems to involve several layers of encapsulation through the use of clustered applications. I will contact members of my group and attempt to reach a decision by next Saturday, so we are clear what we will be focusing our efforts on and how to proceed on the next project. Hopefully we will decide on one of these choices and since they do not seem to be overly technical in nature and appear to be cheaper than some of the alternatives that are listed on the webpage. 
