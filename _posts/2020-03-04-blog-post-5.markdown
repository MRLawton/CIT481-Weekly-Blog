---
layout: post
title:  "Blog Post 5"
date:  2020-03-04 0:10:25 -0800
categories: jekyll blog
---
For the sixth week of class, I focused on completing the Vocureum assignment posted on Canvas. The assignment was composed of three primary parts that were divided into two labs and one activity. Each part of the assignment related to a number of different resources in the Amazon Web Services (AWS) management console and various operations involving them. In the first part of the assignment, the lab covered the VPC component of an EC2 instance and its associated resources. I was able to complete this portion of the assignment without any major issues due to the construction of certain infrastructure and predefined values as well as the provided step-by-step instructions that went over the process in some detail. These instructions accurately described the situation and at specific moments had pictures attached to them as to emphasize their importance at key junctures. The inclusion of these features highlighted their important areas of focus and centered my attention on these points. By following the instructions present in the lab, I was able to construct and connect together a Virtual Private Cloud (VPC), a series of subnets, a security group, and an EC2 (Elastic Compute Cloud) instance. Though I was able to make these resources in the AWS management console, there were several issues that led to me having a certain degree of uncertainty when I encountered them in the lab. The first of these issues was the fact that there was no mention of creating an Elastic IP (Internet Protocol) address for the VPC. Since this resource is required for the VPC it could have been discussed earlier in the tutorial. Also, there could of been more detailed information on how the CIDR block notation was chosen for the specified subnets. It just gave the required values for the field without going over them by explaining how to get the specific numbers used in the instructions. I was able to follow the procedure here, but improving upon this knowledge could better help me understand it as a whole rather than just connecting resources together. Besides those issues, the tutorial appeared to briefly skim over the attached gateways used to regulate internet traffic for the VPC. It mentioned there were NAT and IGW variations, but it could of been helpful if the instructions discussed how they related to private or public subnets. The IGW gateways seem to communicate directly with the internet, while NAT gateways communicate with the internet indirectly. I assume that the private subnets correspond to the NAT gateway and the public subnets are connected to the IGW gateway to facilitate more direct communication with the internet. Although I could follow the instructions within this lab in a step-by-step process and the specified resources were able to run properly, I felt it to be vaguer than the preceding tutorial. At the moment, I feel that my understanding of subnetting, and how it relates to the route tables is still shaky. 

On the second part of the assignment, I worked on the lab that illustrated the process of creating, editing, managing, monitoring, and deleting an EC2 instance within the console. This segment of the assignment seemed to be easier than the preceding portion due to its clarity and straightforward nature. The instructions contained vivid details and information that was necessary to progress through the lab. I even learned some new techniques and lessons regarding editing, managing, and monitoring an instance in the console. I did not really know much about these areas as I thought and it gave me an opportunity to expand on them in greater detail. For instance, the tutorial showed me how to change certain elements such as the instance type, Elastic Block Storage (EBS) volume, accidental deletion feature, and security group configuration to allow HTTP communication with a web browser. These instructions helped me manage and modify the web server to make it more accessible by regulating the cloud infrastructure components and the inbound internet traffic circulating throughout the web server. I also learned about the monitoring capabilities in the console window and their usefulness when it comes down to debugging problems with a running instance. Apparently, I can take screenshots of it from the console and read execution logs, not to mention checking the results of the system and instance reachability tests by utilizing the Status Checks tab and the metrics interface accessible through the Monitoring tab. Though some aspects of this lab may have seemed familiar, it is always a good idea to go over these principles as to reinforce them in my mind and better cement their teachings in my expanding knowledgebase. 

When it came to the lambda function portion of the assignment, the activity introduced several processes that were new to me, and it represented a series of steps that were entirely different from anything I had encountered previously in the console. I was instructed in constructing a lambda function and its trigger as well as configuring the blank function with custom settings and Python code to change the operating status of an EC2 instance. The trigger utilized a cloud watch event set to go off every minute to initiate the changes specified by the lambda function. In this case, the instance received a stop signal every minute that prevented it from starting up properly and functioning as a web server. This operation was designed to highlight the significance of the function, and it displayed its utility by integrating it in this manner. However, there were two areas in this activity that appeared to be a little vague, and I found that some light could have been shed to make them less obscure. The first issue was with the reference to the predefined role that was used in the process of setting up the lambda function. I was uncertain about its inclusion, and it made me wonder if this was a preset value that was readily available to the user or something I would have to create in the future. The second issue was the use of Python code when configuring the function. I felt that the instructions could have gone over these lines of code in more detail since I have never seen this type of programming language before. If the code was broken down into a simpler form, the experience would have been even more educational. Perhaps this was by design since it would have detracted too much from the lesson regarding the AWS console, but I only mention it because this part of the activity seemed integral to the successful operation of the function as a whole. At their most essential form, the resources listed in this activity seem to act as like an if statement that distinguishes when to perform some operation based on specified criteria. 
