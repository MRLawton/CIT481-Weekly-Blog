---
layout: post
title:  "Blog Post 1"
date:   2020-02-05 20:10:25 -0800
categories: jekyll blog
---
For the second week of class, I briefly discussed project-related matters with my fellow classmates from last semester and restored the group we had then. My group is simply called "The Group" and its members are composed of myself, Garret Church, Chris Bushman, Luis Melendez, and Artur Tarverdyan. We chose to set up a CI/CD Pipeline on AWS for our next project based on the provided description listed on the "Projects on AWS" webpage located at https://aws.amazon.com/getting-started/projects/. I am currently trying to create the aws_codepipeline resource in AWS using Terraform, but when I compile my code in the Terminal window I receive an error message. It seems to be connected to my user credentials which seems strange since I was able to synchronize the Terraform enviornment with my AWS account by entering the "$aws configure" command. "  I tried implementing the code found at https://www.terraform.io/docs/providers/aws/r/codepipeline.html in the Nano text editor for the code pipeline, and my Terraform environment was able to initialize correctly. However, the "terraform plan" command will not run properly. I noticed the code seems to utilize an S3 bucket to manage certain resources, so I added a S3 bucket based off of code from last semester to enable the required functionality. With the s3 bucket resource included, the code will not initialize, but when I remove it from the operating environment, the code will initialize again. I discovered more possible material associated with this topic on an article called "Intro to AWS CodeCommit, CodePipeline, and CodeBuild with Terraform" from the Medium website. The information presented here shows the Terraform code segmented across several different files and even seems to mention something about using files written in YAML. It appears that the four main utlized services which are CodeCommit, CodeBuild, CodeDeploy, and CodePiepline will work together in tandem to achieve their purpose of establishing a CI/CD Pipeline, and certain aspects of this code is separated into three unique sections. These key areas seem to be set aside for planning, approving, and applying new data to the system in organized fashion that does not disrupt the overall flow of things. The material on the webpage seemed to provide a balanced approach towards data management, but it did not work properly when I tried running it in my terminal window. Instead of producing legible results prompting me of the successful operation, it listed multiple error messages on the screen. I have been searching online for other material I can possibly use for this project, but so far this webpage seems to be the best solution since it possesses the most detailed information. 

To better my understanding of the fundamental structure in these Terraform scripts, I read the information written on the "Modules" section of the HashiCorp website. It covered some details such as encapsulating layers of code within several different files under subdirectories as interconnected module that can be imported for added functionality. I think I have a better grasp of certain topics now, but some areas still remain shaky. My insecuirty may be relieved by further learning about modular code in Terraform and seeing how it actually used in simple operations. The information I read about in the aforementioned section discussed the versioning of code, specifying providers of cloud infrastructure, acessing module output values, calling children modules, arguments, inherently passing arguments implicitly or stating them explicitly, and how to instantiate different instances of a module in a specific configuration. It did not seem to mention the hierarchial structure of folders and files or go over the complete layout of derivative code in a great amount of detail. From what I have read so far, it appears that the child modules are simply subdirectories full of assorted Terraform scripts that can be imported into the main script within in the root directory. I got the impression that all of the subdirectories must be placed inside of this root direcotry for it to operate correctly and produce the correct results. I believe the more opportunities I get to practice Terraform code will improve my understanding of it as the old saying goes practice makes perfect. For time being, I think the module section of the HashiCorp website is a good source for reference material on the matter. 